<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="styles.css" />
    <title>Generación de Círculos</title>
  </head>
  <body>
    <div class="image-container-top" id="imageContainerTop">
      <div class="image-item">
        <img src="img/foto13.png" alt="Foto 13" width="15" height="15" />
        <div class="value-display" id="personCountDisplay">0</div>
      </div>
      <div class="image-item">
        <img src="img/foto14.png" alt="Foto 14" width="15" height="15" />
        <div class="value-display" id="believerCountDisplay">0</div>
      </div>
      <div class="image-item">
        <img src="img/foto15.png" alt="Foto 15" width="15" height="15" />
        <div class="value-display" id="baptizedCountDisplay">0</div>
      </div>
      <div class="image-item">
        <img src="img/foto16.png" alt="Foto 15" width="15" height="15" />
        <div class="value-display" id="newlyBaptizedCountDisplay">0</div>
      </div>
    </div>
    <div class="circle" id="mainCircle">
      <div class="image-container">
        <div class="image-grid">
          <img
            src="img/foto1.png"
            alt="Foto 3"
            width="20"
            height="20"
            class="inactive"
          />
          <img
            src="img/foto2.png"
            alt="Foto 4"
            width="20"
            height="20"
            class="inactive"
          />
          <img
            src="img/foto3.png"
            alt="Foto 5"
            width="20"
            height="20"
            class="inactive"
          />
          <img
            src="img/foto4.png"
            alt="Foto 6"
            width="20"
            height="20"
            class="inactive"
          />
          <img
            src="img/foto5.png"
            alt="Foto 7"
            width="20"
            height="20"
            class="inactive"
          />
          <img
            src="img/foto6.png"
            alt="Foto 8"
            width="20"
            height="20"
            class="inactive"
          />
          <img
            src="img/foto7.png"
            alt="Foto 9"
            width="20"
            height="20"
            class="inactive"
          />
          <img
            src="img/foto8.png"
            alt="Foto 10"
            width="20"
            height="20"
            class="inactive"
          />
          <img
            src="img/foto9.png"
            alt="Foto 11"
            width="20"
            height="20"
            class="inactive"
          />
          <img
            src="img/foto10.png"
            alt="Foto 12"
            width="20"
            height="20"
            class="inactive"
          />
          <img
            src="img/foto11.png"
            alt="Foto 13"
            width="20"
            height="20"
            class="inactive"
          />
          <img
            src="img/foto12.png"
            alt="Foto 14"
            width="20"
            height="20"
            class="inactive"
          />
        </div>
      </div>
    </div>

    <div class="form-container" id="formContainer">
      <button id="closeButton">✖</button>
      <form id="circleForm">
        <label for="circleCount">Hijos:</label>
        <input type="number" id="circleCount" min="0" placeholder="0" />

        <label for="personCount">Cantidad de Personas:</label>
        <input type="number" id="personCount" min="0" placeholder="0" />

        <label for="believerCount">Cantidad de Creyentes:</label>
        <input type="number" id="believerCount" min="0" placeholder="0" />

        <label for="baptizedCount">Cantidad de Bautizados:</label>
        <input type="number" id="baptizedCount" min="0" placeholder="0" />

        <label for="newlyBaptizedCount">Cantidad de Nuevos Bautizados:</label>
        <input type="number" id="newlyBaptizedCount" min="0" placeholder="0" />

        <label for="evangelicalActionsCount"
          >Acciones del Evangelio por Día:</label
        >
        <input
          type="number"
          id="evangelicalActionsCount"
          min="0"
          placeholder="0"
        />

        <label for="churchName">Nombre de la Iglesia:</label>
        <input type="text" id="churchName" placeholder="Nombre de la Iglesia" />

        <label for="leaderName">Nombre del Líder:</label>
        <input type="text" id="leaderName" placeholder="Nombre del Líder" />

        <label for="email">Correo Electrónico:</label>
        <input type="email" id="email" placeholder="correo@ejemplo.com" />

        <label for="startDate">Fecha de Inicio:</label>
        <input type="date" id="startDate" />

        <label for="country">País:</label>
        <input type="text" id="country" placeholder="País" />

        <label for="place">Lugar (Ciudad o Provincia):</label>
        <input type="text" id="place" placeholder="Lugar" />
        <label for="tipoDeIglecia">Tipo de Iglesia Común:</label>
        <select class="tipoDeIglecia" id="tipoDeIglecia">
          <option value="nuevos_creyentes" selected>Nuevos Creyentes</option>
          <option value="creyentes_antiguos">Creyentes Antiguos</option>
          <option value="tradicional">Tradicional</option>
        </select>
        <label for="personCount">Tres Tercios Comunes:</label>
        <input type="number" id="TresTerciosComunes" min="0" placeholder="0" />
        <label for="personCount">Nota Común:</label>
        <input type="text" id="nota" min="0" placeholder="Escribe una nota" />

        <div class="toggle-container">
          <p>Activar opciones:</p>
          <div class="toggle">
            <span>Nueva Generación Común</span>
            <input type="checkbox" id="toggle1" />
            <label for="toggle1" class="toggle-label"></label>
          </div>
          <div class="toggle">
            <span>Activo</span>
            <input type="checkbox" id="toggle2" />
            <label for="toggle2" class="toggle-label"></label>
          </div>
          <div class="toggle">
            <img src="img/foto1.png" alt="Foto 3" width="40" height="40" />
            <span>Evangelio</span>
            <input type="checkbox" id="toggle3" />
            <label for="toggle3" class="toggle-label"></label>
          </div>
          <div class="toggle">
            <img src="img/foto2.png" alt="Foto 4" width="40" height="40" />
            <span>Arrepentirse</span>
            <input type="checkbox" id="toggle4" />
            <label for="toggle4" class="toggle-label"></label>
          </div>
          <div class="toggle">
            <img src="img/foto3.png" alt="Foto 5" width="40" height="40" />
            <span>Bautismo</span>
            <input type="checkbox" id="toggle5" />
            <label for="toggle5" class="toggle-label"></label>
          </div>
          <div class="toggle">
            <img src="img/foto4.png" alt="Foto 6" width="40" height="40" />
            <span>Espíritu Santo</span>
            <input type="checkbox" id="toggle6" />
            <label for="toggle6" class="toggle-label"></label>
          </div>
          <div class="toggle">
            <img src="img/foto5.png" alt="Foto 7" width="40" height="40" />
            <span>Biblia</span>
            <input type="checkbox" id="toggle7" />
            <label for="toggle7" class="toggle-label"></label>
          </div>
          <div class="toggle">
            <img src="img/foto6.png" alt="Foto 8" width="40" height="40" />
            <span>Amor</span>
            <input type="checkbox" id="toggle8" />
            <label for="toggle8" class="toggle-label"></label>
          </div>
          <div class="toggle">
            <img src="img/foto7.png" alt="Foto 9" width="40" height="40" />
            <span>Santa Cena</span>
            <input type="checkbox" id="toggle9" />
            <label for="toggle9" class="toggle-label"></label>
          </div>
          <div class="toggle">
            <img src="img/foto8.png" alt="Foto 10" width="40" height="40" />
            <span>Oración</span>
            <input type="checkbox" id="toggle10" />
            <label for="toggle10" class="toggle-label"></label>
          </div>
          <div class="toggle">
            <img src="img/foto9.png" alt="Foto 11" width="40" height="40" />
            <span>Señales y Maravillas</span>
            <input type="checkbox" id="toggle11" />
            <label for="toggle11" class="toggle-label"></label>
          </div>
          <div class="toggle">
            <img src="img/foto10.png" alt="Foto 12" width="40" height="40" />
            <span>Dar/Generosidad</span>
            <input type="checkbox" id="toggle12" />
            <label for="toggle12" class="toggle-label"></label>
          </div>
          <div class="toggle">
            <img src="img/foto11.png" alt="Foto 13" width="40" height="40" />
            <span>Adoración</span>
            <input type="checkbox" id="toggle13" />
            <label for="toggle13" class="toggle-label"></label>
          </div>
          <div class="toggle">
            <img src="img/foto12.png" alt="Foto 14" width="40" height="40" />
            <span>Hacer discípulos</span>
            <input type="checkbox" id="toggle14" />
            <label for="toggle14" class="toggle-label"></label>
          </div>
          <div class="toggle">
            <img src="img/foto12.png" alt="Foto 15" width="40" height="40" />
            <span>Iglesia Común</span>
            <input type="checkbox" id="toggle15" />
            <label for="toggle15" class="toggle-label"></label>
          </div>
        </div>

        <div class="button-container">
          <button type="submit">Aceptar</button>
          <button type="button" id="clearButton">Borrar</button>
        </div>
      </form>
    </div>

    <canvas id="canvas"></canvas>
    <script src="script.js"></script>
  </body>
</html>
@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:ital@0;1&display=swap');

body {
    margin: 0;
    height: auto;
    overflow-y: auto;
    background-color: #f2f2f2;
    position: relative;
    font-family: "Playfair Display", serif;
    font-optical-sizing: auto;
    font-weight: 600;
    font-style: inherit;
}
.image-container-top {
    display: flex;
    justify-content: center;
    margin-bottom: 5px; /* Asegura que el contenedor esté junto a 5px de separación */
    position: absolute; /* Deja que se posicione en base a sus coordenadas en script */
    z-index: 10; /* Asegura que el contenedor esté por encima del círculo */
}
.image-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin: 1px;
}
.value-display {
    width: 18px; /* Ancho del espacio */
    height: 10px; /* Alto del espacio */
    background-color: #e0e0e0; /* Color de fondo del espacio */
    text-align: center;
    line-height: 10px; /* Alinear verticalmente el texto */
    margin-top: 2px; /* Espacio entre la imagen y el área de valor */
    font-size: 10px; /* Tamaño de la fuente */
}
canvas {
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
}
.circle {
    width: 80px; 
    height: 80px; 
    border-radius: 50%;
    position: absolute;
    border: 2px solid #3498db;
    background-color: white;
    cursor: grab;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    opacity: 0;
    animation: fadeIn 0.5s forwards;
    z-index: 1; /* Asegura que el círculo esté siempre debajo del contenedor superior */
}
.image-container {
    width: 60px; 
    height: 60px; 
    display: flex;
    align-items: center;
    justify-content: center;
}
.image-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr); 
    width: 100%;
    height: 100%;
    gap: 2px; 
}
.image-item {
    position: relative; 
}
.image-grid img {
    width: 15px; 
    height: 15px;
}
.image-item .overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(255, 255, 255, 0.5);
    opacity: 1; 
    transition: opacity 0.5s;
}
@keyframes fadeIn {
    to {
        opacity: 1;
    }
}
.circle:active { cursor: grabbing; }
.form-container {
    display: none;
    position: absolute;
    right: 0; 
    top: 0; 
    width: 400px; 
    max-height: 91vh; 
    overflow-y: auto; 
    background: rgba(201, 205, 245, 0.8);
    border: 1px solid #3498db;
    padding: 8px;
    border-radius: 8px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
    z-index: 1000;
    opacity: 0;
    animation: slideIn 0.5s forwards;
}
@keyframes slideIn {
    from {
        transform: translateX(100%); 
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}
.toggle-container {
    margin: 20px 0;
}
.toggle {
    display: flex;
    align-items: center;
    justify-content: space-between; 
    margin: 10px;
}
.toggle img {
    margin-right: 10px; 
}
input[type="checkbox"] {
    display: none; 
}
.toggle-label {
    width: 50px;
    height: 20px;
    background-color: #3d4144; 
    border-radius: 12px;
    position: relative;
    cursor: pointer;
    transition: background-color 0.3s;
}
.toggle-label:before {
    content: "";
    position: absolute;
    width: 20px;
    height: 20px;
    background-color: white; 
    border-radius: 50%;
    transition: transform 0.3s;
    left: 0;
}
input[type="checkbox"]:checked + .toggle-label {
    background-color: #3498db; 
}
input[type="checkbox"]:checked + .toggle-label:before {
    transform: translateX(36px); 
}
.form-container form {
    display: flex;
    flex-direction: column; 
}
.form-container label { margin-bottom: 5px; }
.form-container input, .form-container textarea, .tipoDeIglecia {
    margin-bottom: 8px; 
    padding: 6px; 
    border: none; 
    border-bottom: 2px solid #3498db; 
    border-radius: 4px;
    transition: all 0.3s ease; 
    font-size: 11px;
}
.form-container input:focus, .form-container textarea, .tipoDeIglecia:focus {
    outline: none;
    transform: scale(1.05);
}
.form-container .button-container {
    display: flex; 
    gap: 5px; 
    margin-top: auto;
}
.form-container button {
    padding: 6px; 
    border: none;
    border-radius: 4px;
    color: white;
    cursor: pointer; 
    font-weight: bold;
    font-size: 11px; 
    flex: 1; 
    transition: background-color 0.3s;
}
.form-container button[type="submit"] { background-color: #3498db; }
.form-container button:hover { background-color: rgb(52, 69, 219); }
#clearButton { background-color: #e74c3c; }
#clearButton:hover { background-color: #c0392b; }
#closeButton {
    position: absolute;
    top: 5px;
    right: 5px;
    background: transparent;
    border: none;
    font-size: 16px;
    cursor: pointer;
    color: #3498db;
}
.circle-buttons {
    position: absolute;
    left: 55px; 
    display: flex;
    flex-direction: column;
    align-items: flex-start;
}
.add-button {
    width: 25px;
    height: 25px; /* Ajusta la altura del botón */
    background-color: #28a745; /* Color verde */
    color: white; /* Color del símbolo más */
    border: none;
    border-radius: 3px; /* Bordes redondeados */
    cursor: pointer;
    position: absolute;
    right: -10px; /* Posición en relación al círculo */
    top: 50%;
    transform: translateY(-50%); /* Centrando verticalmente en el círculo */
    font-size: 16px; /* Tamaño del símbolo más */
    display: flex;
    align-items: center;
    justify-content: center;
}
.add-button:hover {
    background-color: #218838; /* Oscurecer un poco el color al pasar el mouse */
}
.add-button:focus {
    outline: none; /* Quitar el borde de enfoque */
}
.image-grid img.inactive {
    opacity: 0.3; 
}
const mainCircle = document.getElementById("mainCircle");
const formContainer = document.getElementById("formContainer");
const circleForm = document.getElementById("circleForm");
const canvas = document.getElementById("canvas");
const ctx = canvas.getContext("2d");
const imageContainerTop = document.getElementById("imageContainerTop");
let currentCircle = null;
let offsetX, offsetY;
let circles = [];
let smallCircles = [];
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

function positionMainCircle() {
    const imageContainerRect = imageContainerTop.getBoundingClientRect();
    mainCircle.style.left = (window.innerWidth / 2 - 40) + 'px';
    mainCircle.style.top = (imageContainerRect.bottom + 5) + 'px';
    imageContainerTop.style.left = (window.innerWidth / 2 - (imageContainerTop.offsetWidth / 2)) + 'px';
}
positionMainCircle(); 
addCircleEvents(mainCircle);
circles.push({ element: mainCircle, parent: null, generation: 0, topContainer: imageContainerTop });
const colors = ['white', 'red', 'blue', 'green', 'yellow', 'gray', 'orange', 'pink', 'brown']; 

function onCircleClick(circle, e) {
    currentCircle = circle; 
    formContainer.style.display = 'block'; 
    const rect = currentCircle.getBoundingClientRect();
    formContainer.style.top = '10px'; 
    formContainer.style.left = (window.innerWidth - formContainer.offsetWidth - 10) + 'px'; 
}

function onRightClick(circle, e) {
    e.preventDefault(); 
    currentCircle = circle; 
    currentCircle.style.transition = 'none'; 
    offsetX = e.clientX - currentCircle.getBoundingClientRect().left;
    offsetY = e.clientY - currentCircle.getBoundingClientRect().top;

    function onMouseMove(e) {
        currentCircle.style.left = (e.clientX - offsetX) + 'px';
        currentCircle.style.top = (e.clientY - offsetY) + 'px';
        const currentTopContainer = circles.find(circleData => circleData.element === currentCircle).topContainer;
        currentTopContainer.style.left = (e.clientX - offsetX + (currentCircle.offsetWidth / 2) - (currentTopContainer.offsetWidth / 2)) + 'px';
        currentTopContainer.style.top = (parseFloat(currentCircle.style.top) - currentTopContainer.offsetHeight - 5) + 'px';
        drawLines(); 
        adjustBodyHeight(); 
    }

    function onMouseUp() {
        currentCircle.style.transition = ''; 
        document.removeEventListener("mousemove", onMouseMove);
        document.removeEventListener("mouseup", onMouseUp);
    }
    document.addEventListener("mousemove", onMouseMove);
    document.addEventListener("mouseup", onMouseUp);
}

function addCircleEvents(circle) {
    circle.addEventListener("click", (e) => {
        onCircleClick(circle, e);
    });
    circle.addEventListener("mousedown", (e) => {
        if (e.button === 2) { 
            onRightClick(circle, e);
        }
    });
}

function drawLines() {
    ctx.clearRect(0, 0, canvas.width, canvas.height); 
    circles.forEach(circleData => {
        const circleRect = circleData.element.getBoundingClientRect(); 
        const circleCenterX = circleRect.left + circleRect.width / 2;
        const circleCenterY = circleRect.top + circleRect.height / 2;
        const radius = circleRect.width / 2;
        if (circleData.parent) { 
            const parentRect = circleData.parent.getBoundingClientRect();
            const parentCenterX = parentRect.left + parentRect.width / 2;
            const parentCenterY = parentRect.top + parentRect.height / 2;
            const angleToParent = Math.atan2(circleCenterY - parentCenterY, circleCenterX - parentCenterX);
            const startX = circleCenterX - radius * Math.cos(angleToParent);
            const startY = circleCenterY - radius * Math.sin(angleToParent);
            const endX = parentCenterX + radius * Math.cos(angleToParent);
            const endY = parentCenterY + radius * Math.sin(angleToParent);
            ctx.beginPath();
            ctx.moveTo(startX, startY);
            ctx.lineTo(endX, endY);
            ctx.strokeStyle = '#96d1f8cc';
            ctx.lineWidth = 2;
            ctx.stroke();
        }
    });
}

circleForm.addEventListener("submit", function(e) {
    e.preventDefault();
    const personCountValue = document.getElementById("personCount").value;
    const believerCountValue = document.getElementById("believerCount").value;
    const baptizedCountValue = document.getElementById("baptizedCount").value;
    const newlyBaptizedCountValue = document.getElementById("newlyBaptizedCount").value;
    const currentTopContainer = circles.find(circleData => circleData.element === currentCircle).topContainer;
    currentTopContainer.querySelector("#personCountDisplay").innerText = personCountValue;
    currentTopContainer.querySelector("#believerCountDisplay").innerText = believerCountValue;
    currentTopContainer.querySelector("#baptizedCountDisplay").innerText = baptizedCountValue;
    currentTopContainer.querySelector("#newlyBaptizedCountDisplay").innerText = newlyBaptizedCountValue;
    const circleCount = parseInt(document.getElementById("circleCount").value);
    const toggleValues = Array.from({ length: 12 }, (_, index) => 
        document.getElementById(`toggle${index + 3}`).checked 
    );

    // Cambiar el borde del círculo y su forma según el tipo de iglesia seleccionado
    const tipoDeIglecia = document.getElementById("tipoDeIglecia").value;
    const iglesiaComunToggle = document.getElementById("toggle15");
    
    if (tipoDeIglecia === "nuevos_creyentes") {
        currentCircle.style.borderRadius = "50%"; // Mantener como círculo
        currentCircle.style.border = "2px solid #3498db"; // Borde sólido por defecto
    } else if (tipoDeIglecia === "creyentes_antiguos") {
        currentCircle.style.borderRadius = "0"; // Convertir a cuadrado
        currentCircle.style.border = "2px solid #3498db"; // Borde sólido
    } else if (tipoDeIglecia === "tradicional") {
        currentCircle.style.borderRadius = "0"; // Convertir a cuadrado
        currentCircle.style.border = "2px solid red"; // Borde rojo
    }
    
    // Cambiar el borde del círculo a discontinuo si el toggle "Iglesia Común" está activado
    if (iglesiaComunToggle.checked && tipoDeIglecia === "tradicional") {
        currentCircle.style.border = "2px dashed red"; // Cambiar a borde discontinuo rojo
    } else if (iglesiaComunToggle.checked) {
        currentCircle.style.border = "2px dashed #3498db"; // Cambiar a borde discontinuo azul
    }

    console.log(toggleValues); 
    removeSmallCircles(currentCircle); 
    createChildCircles(circleCount, currentCircle.classList[1]); 
    const imageGrid = currentCircle.querySelector('.image-grid');
    const checkboxes = document.querySelectorAll('.toggle input[type="checkbox"]');
    const images = imageGrid.querySelectorAll('img');
    images.forEach((img, index) => {
        if (checkboxes[index + 2] && !checkboxes[index + 2].checked) { 
            img.classList.add('inactive');
        } else {
            img.classList.remove('inactive');
        }
    });
    formContainer.style.display = 'none'; 
    drawLines();
    adjustBodyHeight();
});

function removeSmallCircles(parentCircle) {
    smallCircles.forEach(smallCircleData => {
        if (smallCircleData.parent === parentCircle) {
            smallCircleData.element.remove();
        }
    });
    smallCircles = smallCircles.filter(smallCircleData => smallCircleData.parent !== parentCircle);
}

document.getElementById('clearButton').addEventListener("click", function() {
    if (currentCircle) {
        const circleToDelete = currentCircle; 
        circleToDelete.style.animation = 'fadeOut 0.5s forwards'; 
        setTimeout(() => {
            circles = circles.filter(circleData => circleData.element !== circleToDelete);
            circles.forEach(circleData => {
                if (circleData.parent === circleToDelete) {
                    circleData.parent = null;
                }
            });
            circleToDelete.remove();
            formContainer.style.display = 'none';
            drawLines();
            adjustBodyHeight(); 
        }, 500); 
    }
});

document.getElementById('closeButton').addEventListener('click', function() {
    formContainer.style.animation = 'slideOut 0.5s forwards'; 
    setTimeout(() => {
        formContainer.style.display = 'none'; 
    }, 500); 
});

formContainer.addEventListener('mousedown', (e) => {
    let offsetX = e.clientX - formContainer.getBoundingClientRect().left;
    let offsetY = e.clientY - formContainer.getBoundingClientRect().top;

    function onMouseMove(e) {
        formContainer.style.left = (e.clientX - offsetX) + 'px';
        formContainer.style.top = (e.clientY - offsetY) + 'px';
    }

    function onMouseUp() {
        document.removeEventListener('mousemove', onMouseMove);
        document.removeEventListener('mouseup', onMouseUp);
    }
    document.addEventListener('mousemove', onMouseMove);
    document.addEventListener('mouseup', onMouseUp);
});

function getGeneration(circle) {
    const circleData = circles.find(circleData => circleData.element === circle);
    return circleData ? circleData.generation + 1 : 0;
}

function createChildCircles(count, color) {
    const parentRect = currentCircle.getBoundingClientRect(); 
    const startY = parentRect.bottom + 100; 
    const totalCircleWidth = 80 * count + (count - 1) * 30; 
    const startX = parentRect.left + (parentRect.width / 2) - (totalCircleWidth / 2); 

    for (let i = 0; i < count; i++) {
        const additionalCircle = document.createElement("div");
        additionalCircle.classList.add("circle", color);
        additionalCircle.style.position = 'absolute';
        additionalCircle.style.width = '80px'; 
        additionalCircle.style.height = '80px';
        additionalCircle.style.left = (startX + i * (80 + 30)) + 'px'; 
        additionalCircle.style.top = startY + 'px'; 
        const imageContainer = document.createElement("div");
        imageContainer.classList.add("image-container");
        const imageGrid = document.createElement("div");
        imageGrid.classList.add("image-grid");

        for (let j = 1; j <= 12; j++) {
            const img = document.createElement("img");
            img.src = `img/foto${j}.png`;
            img.alt = `Foto ${j + 2}`;
            img.width = 20;
            img.height = 20;
            img.classList.add('inactive'); 
            imageGrid.appendChild(img);
        }
        
        imageContainer.appendChild(imageGrid);
        additionalCircle.appendChild(imageContainer);
        const newImageContainerTop = document.createElement("div");
        newImageContainerTop.classList.add("image-container-top");
        newImageContainerTop.id = `imageContainerTop${i}`; 
        newImageContainerTop.style.position = 'absolute';
        newImageContainerTop.style.left = ((startX + i * (80 + 30) + (80 / 2) - (newImageContainerTop.offsetWidth / 2)) -42) + 'px'; 
        newImageContainerTop.style.top = (startY - 39) + 'px'; 
        newImageContainerTop.innerHTML = `
            <div class="image-item">
                <img src="img/foto13.png" alt="Foto 13" width="20" height="20">
                <div class="value-display" id="personCountDisplay">0</div>
            </div>
            <div class="image-item">
                <img src="img/foto14.png" alt="Foto 14" width="20" height="20">
                <div class="value-display" id="believerCountDisplay">0</div>
            </div>
            <div class="image-item">
                <img src="img/foto15.png" alt="Foto 15" width="20" height="20">
                <div class="value-display" id="baptizedCountDisplay">0</div>
            </div>
            <div class="image-item">
                <img src="img/foto16.png" alt="Foto 16" width="20" height="20">
                <div class="value-display" id="newlyBaptizedCountDisplay">0</div>
            </div>
        `;
        document.body.appendChild(newImageContainerTop); 
        circles.push({ 
            element: additionalCircle, 
            parent: currentCircle, 
            generation: getGeneration(currentCircle), 
            topContainer: newImageContainerTop 
        });
        document.body.appendChild(additionalCircle);
        additionalCircle.style.animation = 'fadeIn 0.5s forwards'; 
        addCircleEvents(additionalCircle);
        createSmallCircles(0, additionalCircle);
    }
}

function createSmallCircles(count, parentCircle) {
    let smallCircleColor;
    const generation = getGeneration(parentCircle);
    const parentRect = parentCircle.getBoundingClientRect();
    const radius = 20;

    for (let i = 0; i < count; i++) {
        const smallCircle = document.createElement("div");
        smallCircle.classList.add("circle", smallCircleColor);
        smallCircle.style.width = '6px';
        smallCircle.style.height = '6px';
        smallCircle.style.borderRadius = '50%';
        smallCircle.style.position = 'absolute';
        smallCircle.style.border = 'none';
        const angle = (i / (count === 0 ? 1 : count)) * 2 * Math.PI; 
        smallCircle.style.left = Math.round(parentRect.width / 2 + (radius) * Math.cos(angle) - 5) + 'px'; 
        smallCircle.style.top = Math.round(parentRect.height / 2 + (radius) * Math.sin(angle) - 5) + 'px'; 
        parentCircle.appendChild(smallCircle);
        smallCircles.push({ element: smallCircle, parent: parentCircle, generation: generation + 1 });
    }
}

function adjustBodyHeight() {
    let maxHeight = 0;
    circles.forEach(circleData => {
        const circleRect = circleData.element.getBoundingClientRect();
        maxHeight = Math.max(maxHeight, circleRect.bottom);
    });
    document.body.style.height = (maxHeight + 500) + 'px'; 
    const documentWidth = Math.max(...circles.map(circleData => circleData.element.getBoundingClientRect().right));
    document.body.style.width = documentWidth + 'px'; 
}

drawLines();   este es mi codigo de mi pagina web necesito que me le hagas algunos ajustes y siempre me de los 3 codigos completos actualizado sin cambiar mas nada en el codigo, lo primero que quiero es que me crees un boton al lado derecho de la posisicion e cada circulo , este boton cuando el usuario le de click va a abtir una ventana con el mismo estilo del formulario donde me va a mostrar todos los datos ingresados por el usuario el el formulario que le corresponde al circulo que tiene al lado el boton donde el usuario de click